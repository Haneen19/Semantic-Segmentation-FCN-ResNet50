{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "86dfa1e2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 578 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "from tensorflow.keras.models import *\n",
    "from tensorflow.keras.layers import *\n",
    "from keras.callbacks import EarlyStopping, ModelCheckpoint\n",
    "from keras import backend as K\n",
    "from keras import utils as u\n",
    "from keras import losses, optimizers\n",
    "from keras.callbacks import ReduceLROnPlateau, EarlyStopping\n",
    "from sklearn.model_selection import train_test_split\n",
    "import tensorflow as tf\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "#from keras.utils import to_categorical\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "import multiprocessing\n",
    "from skimage.util import random_noise, img_as_float\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "from shutil import copyfile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7c2c1862",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow import keras\n",
    "model = keras.models.load_model('cityscapessss.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8e988883",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import load_model\n",
    "new_model = load_model('cityscapessss.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "37129e09",
   "metadata": {},
   "outputs": [],
   "source": [
    "weights = new_model.get_weights()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d420fc35",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plot\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b200b79e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "import os\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "dce38bd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "masks=[]\n",
    "for dirname, _, filenames in os.walk('E:/Dataset/cityScape2-wb/Reference/gtFine/Train/cologne'):\n",
    "    for filename in filenames:\n",
    "        \n",
    "        image = cv2.imread(os.path.join(dirname, filename),0)\n",
    "        res = cv2.resize(image, (128,128), interpolation = cv2.INTER_AREA)\n",
    "       # img3gs = cv2.cvtColor(res, cv2.COLOR_BGR2GRAY)\n",
    "        masks.append(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "e007cad8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 37.5 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "images=[]\n",
    "for dirname, _, filenames in os.walk('E:/Dataset/cityScape2-wb/Input/Train/cologne'):\n",
    "    for filename in filenames:\n",
    "        \n",
    "        image = cv2.imread(os.path.join(dirname, filename))\n",
    "        res = cv2.resize(image, (128,128), interpolation = cv2.INTER_AREA)\n",
    "        \n",
    "        images.append(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f76baf07",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: gtts in e:\\anaconda\\lib\\site-packages (2.2.4)\n",
      "Requirement already satisfied: requests in e:\\anaconda\\lib\\site-packages (from gtts) (2.26.0)\n",
      "Requirement already satisfied: six in e:\\anaconda\\lib\\site-packages (from gtts) (1.16.0)\n",
      "Requirement already satisfied: click in e:\\anaconda\\lib\\site-packages (from gtts) (8.0.3)\n",
      "Requirement already satisfied: colorama in e:\\anaconda\\lib\\site-packages (from click->gtts) (0.4.4)\n",
      "Requirement already satisfied: charset-normalizer~=2.0.0 in e:\\anaconda\\lib\\site-packages (from requests->gtts) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in e:\\anaconda\\lib\\site-packages (from requests->gtts) (3.2)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in e:\\anaconda\\lib\\site-packages (from requests->gtts) (2021.10.8)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in e:\\anaconda\\lib\\site-packages (from requests->gtts) (1.26.7)\n"
     ]
    }
   ],
   "source": [
    "!pip install gtts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "f2f5c2f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: playsound in e:\\anaconda\\lib\\site-packages (1.3.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install playsound"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "398c846e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gtts  #google text to speech\n",
    "from playsound import playsound"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "2571537a",
   "metadata": {},
   "outputs": [],
   "source": [
    "lables = {\n",
    "    0 :'unlabeled'             ,\n",
    "\t1 :'ego vehicle'           ,\n",
    "\t2 :'rectification border'  ,\n",
    "\t3 :'out of roi'            ,\n",
    "\t4 :'static'                ,\n",
    "\t5 :'dynamic'               ,\n",
    "\t6 :'ground'                ,\n",
    "\t7 :'road'                  ,\n",
    "\t8 :'sidewalk'              ,\n",
    "\t9 :'parking'               ,\n",
    "\t10 :'rail track'            ,\n",
    "\t11 :'building'              ,\n",
    "\t12 :'wall'                  ,\n",
    "\t13 :'fence'                 ,\n",
    "\t14 :'guard rail'            ,\n",
    "\t15 :'bridge'                ,\n",
    "\t16 :'tunnel'                ,\n",
    "\t17 :'pole'                  ,\n",
    "\t18 :'polegroup'             ,\n",
    "\t19 :'traffic light'         ,\n",
    "\t20 :'traffic sign'          ,\n",
    "\t21 :'vegetation'            ,\n",
    "\t22 :'terrain'               ,\n",
    "\t23 :'sky'                   ,\n",
    "\t24 :'person'                ,\n",
    "\t25 :'rider'                 ,\n",
    "\t26 :'car'                   ,\n",
    "\t27 :'truck'                 ,\n",
    "\t28 :'bus'                   ,\n",
    "\t29 :'caravan'               ,\n",
    "\t30 :'trailer'               ,\n",
    "\t31 :'train'                 ,\n",
    "\t32 :'motorcycle'            ,\n",
    "\t33 :'bicycle'               ,\n",
    "\t-1 :'license plate'         ,\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "aff01786",
   "metadata": {},
   "outputs": [],
   "source": [
    "def compareMasks(numbers, model):\n",
    "        lables = {\n",
    "            0 :'unlabeled'             ,\n",
    "\t\t\t1 :'ego vehicle'           ,\n",
    "\t\t\t2 :'rectification border'  ,\n",
    "\t\t\t3 :'out of roi'            ,\n",
    "\t\t\t4 :'static'                ,\n",
    "\t\t\t5 :'dynamic'               ,\n",
    "\t\t\t6 :'ground'                ,\n",
    "\t\t\t7 :'road'                  ,\n",
    "\t\t\t8 :'sidewalk'              ,\n",
    "\t\t\t9 :'parking'               ,\n",
    "\t\t\t10 :'rail track'            ,\n",
    "\t\t\t11 :'building'              ,\n",
    "\t\t\t12 :'wall'                  ,\n",
    "\t\t\t13 :'fence'                 ,\n",
    "\t\t\t14 :'guard rail'            ,\n",
    "\t\t\t15 :'bridge'                ,\n",
    "\t\t\t16 :'tunnel'                ,\n",
    "\t\t\t17 :'pole'                  ,\n",
    "\t\t\t18 :'polegroup'             ,\n",
    "\t\t\t19 :'traffic light'         ,\n",
    "\t\t\t20 :'traffic sign'          ,\n",
    "\t\t\t21 :'vegetation'            ,\n",
    "\t\t\t22 :'terrain'               ,\n",
    "\t\t\t23 :'sky'                   ,\n",
    "\t\t\t24 :'person'                ,\n",
    "\t\t\t25 :'rider'                 ,\n",
    "\t\t\t26 :'car'                   ,\n",
    "\t\t\t27 :'truck'                 ,\n",
    "\t\t\t28 :'bus'                   ,\n",
    "\t\t\t29 :'caravan'               ,\n",
    "\t\t\t30 :'trailer'               ,\n",
    "\t\t\t31 :'train'                 ,\n",
    "\t\t\t32 :'motorcycle'            ,\n",
    "\t\t\t33 :'bicycle'               ,\n",
    "\t\t\t-1 :'license plate'         ,\n",
    "\t\t}\n",
    "        for number in numbers:\n",
    "            imgLables = []                                                \n",
    "            s=model.predict(np.expand_dims(images[number], axis = 0))\n",
    "            #print(s[0])\n",
    "            #print(np.unique(s))\n",
    "            check = np.zeros((128, 128), dtype=np.uint8)\n",
    "            for i in range(0, len(s[0])):\n",
    "                check[i]= np.argmax(s[0][i], axis = 1)\n",
    "            print(np.unique(check))\n",
    "            uniq = np.unique(check)\n",
    "            for i in range (len(uniq)):\n",
    "                #print(lables[i])\n",
    "                imgLables.append(lables[i])\n",
    "            ss= addColors(check)\n",
    "            mm= addColors(masks[number])\n",
    "            f, axarr = plt.subplots(1,2)\n",
    "            ax1=axarr[0].imshow(ss)\n",
    "            ax2=axarr[1].imshow(mm)\n",
    "            print(imgLables)\n",
    "            lablesString=''\n",
    "            for i in range (len(imgLables)):\n",
    "                lablesString = lablesString +' .'+ imgLables[i] \n",
    "            # make a request to google to get synthesis  \n",
    "            t1 = gtts.gTTS(lablesString)\n",
    "            # save the audio file  \n",
    "            #el gded bi override el adem (change by concatinating the name + i + .mp3)\n",
    "            t1.save(\"outputlables.mp3\")\n",
    "            # play the audio file  \n",
    "           # playsound(\"output.mp3\")\n",
    "def addColors(gg):\n",
    "        im = np.zeros([gg.shape[0],gg.shape[1],3],dtype=np.uint8)\n",
    "\n",
    "        for i in range(gg.shape[0]):\n",
    "    \n",
    "             for u in range(gg.shape[1]):\n",
    "                if gg[i,u]==-1:\n",
    "                        im[i,u]= np.array([ 0,  0,142])\n",
    "                if gg[i,u]==33:\n",
    "                        im[i,u]= np.array([119, 11, 32])\n",
    "                if gg[i,u]==32:\n",
    "                        im[i,u]= np.array([  0,  0,230])\n",
    "                if gg[i,u]==31:\n",
    "                        im[i,u]= np.array([  0, 80,100])\n",
    "                if gg[i,u]==30:\n",
    "                        im[i,u]= np.array([ 0,  0,110])\n",
    "                if gg[i,u]==29:\n",
    "                        im[i,u]= np.array([  0,  0, 90])\n",
    "                if gg[i,u]==28:\n",
    "                        im[i,u]= np.array([  0, 60,100])\n",
    "                if gg[i,u]==27:\n",
    "                        im[i,u]= np.array([  0,  0, 70])\n",
    "                if gg[i,u]==26:\n",
    "                        im[i,u]= np.array([  0,  0,142])\n",
    "                if gg[i,u]==25:\n",
    "                        im[i,u]= np.array([255,  0,  0])\n",
    "                if gg[i,u]==24:\n",
    "                        im[i,u]= np.array([220, 20, 60])\n",
    "                if gg[i,u]==23:\n",
    "                        im[i,u]= np.array([70,130,180])\n",
    "                if gg[i,u]==22:\n",
    "                        im[i,u]= np.array([152,251,152])\n",
    "                if gg[i,u]==21:\n",
    "                        im[i,u]= np.array([107,142, 35])\n",
    "                if gg[i,u]==20:\n",
    "                        im[i,u]= np.array([220,220,  0])\n",
    "                if gg[i,u]==19:\n",
    "                        im[i,u]= np.array([250,170, 30])\n",
    "                if gg[i,u]==18:\n",
    "                        im[i,u]= np.array([153,153,153])\n",
    "                if gg[i,u]==17:\n",
    "                        im[i,u]= np.array([153,153,153])\n",
    "                if gg[i,u]==16:\n",
    "                        im[i,u]= np.array([150,120, 90])\n",
    "                if gg[i,u]==15:\n",
    "                        im[i,u]= np.array([150,100,100])\n",
    "                if gg[i,u]==14:\n",
    "                        im[i,u]= np.array([180,165,180])\n",
    "                if gg[i,u]==13:\n",
    "                        im[i,u]= np.array([190,153,153])\n",
    "                if gg[i,u]==12:\n",
    "                        im[i,u]= np.array([102,102,156])\n",
    "                if gg[i,u]==11:\n",
    "                        im[i,u]= np.array([70, 70, 70])\n",
    "                if gg[i,u]==10:\n",
    "                        im[i,u]= np.array([230,150,140])\n",
    "                if gg[i,u]==9:\n",
    "                        im[i,u]= np.array([250,170,160])\n",
    "                if gg[i,u]==8:\n",
    "                        im[i,u]= np.array([244, 35,232])\n",
    "                if gg[i,u]==7:\n",
    "                        im[i,u]= np.array([128, 64,128])\n",
    "                if gg[i,u]==6:\n",
    "                        im[i,u]=np.array([81,  0, 81])\n",
    "                if gg[i,u]==4:\n",
    "                        im[i,u]=np.array([  0,  0,  0])\n",
    "                if gg[i,u]==5:\n",
    "                        im[i,u]=np.array([111, 74,  0])\n",
    "                if gg[i,u]==3:\n",
    "                        im[i,u]=np.array([  0,  0,  0])\n",
    "                if gg[i,u]==2:\n",
    "                        im[i,u]=np.array([ 0,  0,  0])\n",
    "                if gg[i,u]==1:\n",
    "                        im[i,u]=np.array([  0,  0,  0])\n",
    "                if gg[i,u]==0:\n",
    "                        im[i,u]=np.array([  0,  0,  0])\n",
    "        return im"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3c2adf86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n",
      " 25 26 28 30 32 33]\n",
      "['unlabeled', 'ego vehicle', 'rectification border', 'out of roi', 'static', 'dynamic', 'ground', 'road', 'sidewalk', 'parking', 'rail track', 'building', 'wall', 'fence', 'guard rail', 'bridge', 'tunnel', 'pole', 'polegroup', 'traffic light', 'traffic sign', 'vegetation', 'terrain', 'sky', 'person', 'rider', 'car', 'truck', 'bus', 'caravan']\n",
      "[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n",
      " 26]\n",
      "['unlabeled', 'ego vehicle', 'rectification border', 'out of roi', 'static', 'dynamic', 'ground', 'road', 'sidewalk', 'parking', 'rail track', 'building', 'wall', 'fence', 'guard rail', 'bridge', 'tunnel', 'pole', 'polegroup', 'traffic light', 'traffic sign', 'vegetation', 'terrain', 'sky', 'person']\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "compareMasks([1,3], model)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "73a7a70b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ca0e0d45",
   "metadata": {},
   "outputs": [],
   "source": [
    "TF_LITE_MODEL_FILE_NAME = \"tf_lite_model.tflite\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7eca57e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: C:\\Users\\Hp\\AppData\\Local\\Temp\\tmpvay6tsub\\assets\n"
     ]
    }
   ],
   "source": [
    "tf_lite_converter = tf.lite.TFLiteConverter.from_keras_model(model)\n",
    "tflite_model = tf_lite_converter.convert()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa5c2271",
   "metadata": {},
   "outputs": [],
   "source": [
    "tflite_model_name = TF_LITE_MODEL_FILE_NAME\n",
    "open(tflite_model_name, \"wb\").write(tflite_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dcaca7fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "convert_bytes(get_file_size(TF_LITE_MODEL_FILE_NAME), \"KB\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81330368",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
